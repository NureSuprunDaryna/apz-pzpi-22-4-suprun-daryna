Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії








Практична робота
з дисципліни: “Архітектура програмного забезпечення”
на тему:  «Архітектура відомих програмних систем»












Виконала ст. гр ПЗПІ-22-4
Супрун Дарина Андріївна


24 березня 2025 р.


Перевірив 
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович










Харків 2025
1 ІСТОРІЯ ЗМІН


Таблиця 1 – Історія змін поточного звіту
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	09.03.2025
	0.1
	Створення документа, додавання титульної сторінки та структури звіту
	2
	11.03.2025
	0.1
	Додавання розділу 2 «Завдання»
	3
	11.03.2025
	0.1 
	Оформлення структури GitHub-репозиторію згідно з вимогами
	4
	12.03.2025
	0.1
	Підготовка матеріалу для слайдів презентації, початок роботи з доповіддю
	5
	13.03.2025
	0.1
	Додавання вступу до розділу 3 «Опис виконаної роботи»
	6
	13.03.2025
	0.1
	Написання та редагування основної частини розділу 3
	7
	14.03.2025
	0.1
	Завершення блоку про рекомендаційну систему та інструменти аналітики
	8
	14.03.2025
	0.1
	Підготовка висновків (розділ 4), попереднє редагування
	9
	24.03.2025
	0.2
	Повна вичитка, редагування всього тексту, фіналізація версії для GitHub
	

________________


2 ЗАВДАННЯ


Завдання на практичне заняття 2 (ПЗ2):
1. Підготувати доповідь про архітектуру однієї з відомих складних програмних систем.
2. Створити та оформити слайди презентації доповіді
3. Створити та опублікувати на YouTube відеозапис доповіді
4. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5. При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6. Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
7. Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
8. Експортувати звіт у файл у простому текстовому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub
9. Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ2
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


У межах практичного заняття було проведено ґрунтовне дослідження архітектури програмної системи Netflix як прикладу складного, масштабованого й високо доступного хмарного рішення. Метою роботи стало вивчення структури архітектури, аналіз її компонентів, технологічного стеку, механізмів стійкості до збоїв, масштабування, а також засобів персоналізації контенту на основі аналітики й машинного навчання.
        У процесі аналізу було систематизовано відомості з офіційних технічних ресурсів Netflix, блогів інженерів компанії, документації AWS, а також академічних матеріалів, що описують розподілені системи. Особливу увагу приділено тому, як Netflix реалізує критично важливі вимоги до хмарної платформи глобального масштабу: безперервну доступність, відмовостійкість, масштабованість, спостережуваність та швидке розгортання змін.
        Нижче наведено послідовний виклад досліджених компонентів архітектури Netflix, згрупованих за функціональними рівнями системи. В описі особливий акцент зроблено на практичних рішеннях, що забезпечують стабільну роботу сервісу в умовах високого навантаження, а також на сучасних підходах до управління мікросервісною екосистемою.
        Netflix — це не просто сервіс для перегляду фільмів. Це — глобальна технологічна платформа, яка щодня обслуговує сотні мільйонів користувачів у всьому світі. Завдяки своїй популярності та масштабам компанія постійно стикається з серйозними технічними викликами: як забезпечити безперебійну трансляцію, як обробити величезну кількість одночасних запитів, як підтримувати персоналізацію у реальному часі. Щоб відповідати цим викликам, Netflix побудував складну розподілену архітектуру, яка поєднує мікросервіси, хмарну інфраструктуру AWS, власну CDN-систему OpenConnect і машинне навчання. Ця архітектура стала зразком у галузі — її вивчають як у технічних блогах, так і в університетах. У своїй доповіді я детально розгляну, з чого вона складається, які технології використовуються, як досягається масштабованість, стійкість і швидкість розвитку такого великого сервісу.
        Архітектура Netflix формувалася як відповідь на жорсткі технічні вимоги, притаманні глобальним онлайн-сервісам із мільйонною аудиторією. Найперша вимога — це висока доступність (High Availability). Сервіс має бути доступним користувачам практично безперервно, з максимально допустимим часом простою, що вимірюється секундами на рік. Це досягається шляхом розміщення сервісів у множинних зонах доступності AWS (Availability Zones), балансування навантаження через Elastic Load Balancer (ELB) і відмовостійке зберігання даних. Уся архітектура будується так, щоб жодна поодинока точка відмови не могла вивести систему з ладу.
        Другою критичною вимогою є відмовостійкість (Fault Tolerance). У Netflix активно застосовують проектування з розрахунком на відмову — принцип, за яким очікуване знищення або недоступність будь-якого елемента не має впливати на роботу всієї системи. Для цього використовуються інструменти на кшталт Hystrix — бібліотека, що реалізує шаблон Circuit Breaker і дозволяє сервісам автоматично "роз’єднуватися" з проблемними вузлами. Netflix також застосовує власну Chaos Engineering-платформу, зокрема Chaos Monkey, яка навмисно викликає збої в системі, щоб перевірити її стійкість до непередбачених ситуацій.
        Наступна вимога — масштабованість (Scalability). Netflix повинен мати змогу обслуговувати різко змінне навантаження — наприклад, під час виходу нового сезону серіалу навантаження на систему може зрости у десятки разів. Це вирішується через горизонтальне масштабування мікросервісів, кероване системою Titus — власною реалізацією оркестрації контейнерів, аналогічною до Kubernetes. Нові інстанси автоматично запускаються й зупиняються залежно від показників використання CPU, пам’яті або вхідного трафіку.
        Ще одна фундаментальна вимога — гнучкість і швидкість змін (Change Velocity). Netflix оновлює код у продакшн щодня, тому архітектура повинна підтримувати DevOps-практики, включно з CI/CD, автоматизованим тестуванням, ізольованим деплоєм кожного мікросервісу. Команди можуть розгортати й оновлювати свої частини системи без взаємозалежностей із іншими.
        Нарешті, вся система повинна бути спостережуваною (Observability). Для цього Netflix реалізує централізоване логування, моніторинг та збір метрик у реальному часі через стек Kafka → Samza → Elasticsearch → Kibana / Spark. Це дозволяє не лише виявляти помилки, а й активно реагувати на аномалії, автоматично масштабувати компоненти та покращувати продуктивність.
        Архітектура Netflix — це приклад надмасштабованої, хмарної та мікросервісної системи, спроєктованої для стабільної роботи за екстремальних навантажень. Усі запити від користувачів, незалежно від того, чи це смартфон, браузер або SmartTV, спочатку потрапляють до балансувальника навантаження AWS ELB, який розподіляє трафік між доступними вузлами. Далі запит надходить на Netty Server — високопродуктивний неблокуючий сервер, що обробляє тисячі одночасних з’єднань із мінімальними затримками. Саме через Netty запит потрапляє до Zuul — API Gateway, який виконує критично важливі функції: автентифікацію, фільтрацію, маршрутизацію та логування. Zuul реалізує кілька фільтрів, які дозволяють централізовано керувати обробкою запитів, впроваджувати A/B-тестування, кешування й захист API.
        Після проходження через Zuul запит перенаправляється до відповідного сервісу за допомогою Service Client. У цьому ланцюгу ключову роль відіграє бібліотека Hystrix, яка реалізує шаблон Circuit Breaker. Вона дозволяє сервісам ізолюватися від збоїв один одного, автоматично відключати або обходити компоненти, які відповідають повільно чи з помилками, і запобігати лавиноподібним відмовам. Завдяки цьому система зберігає стабільність навіть у разі часткових проблем. Далі запит потрапляє до одного з численних мікросервісів — їх у Netflix понад 700. Кожен сервіс є самодостатнім, має власну бізнес-логіку, базу даних і життєвий цикл. Таке розділення дозволяє командам працювати незалежно, масштабувати компоненти точково й оновлювати їх без ризику для всієї системи.
        Мікросервіси працюють із різними типами сховищ: для критично важливих операцій — транзакцій і білінгу — використовують MySQL, для великих обсягів поведінкових даних — Cassandra, а для прискорення відповідей — EVCache, який є внутрішньою кешуючою системою Netflix на основі Memcached. Відеоконтент, натомість, не передається з цих сервісів безпосередньо. Замість цього Netflix використовує власну CDN-мережу OpenConnect — фізичну інфраструктуру серверів, розміщених у датацентрах інтернет-провайдерів по всьому світу. Після натискання «Play» клієнт напряму під’єднується до найближчого вузла OpenConnect, що зменшує затримку, підвищує якість трансляції і розвантажує основну інфраструктуру.
        Ще одним важливим елементом архітектури є подієва обробка та аналітика. Усі дії користувачів — перегляди, натискання, переходи, помилки — генерують події, які передаються у Kafka. Потоки обробляються системами реального часу — Apache Samza, Spark та Elasticsearch — для створення рекомендацій, моніторингу та збору метрик. Дані також потрапляють до Amazon S3, де використовуються для офлайн-аналізу, моделювання та тренування алгоритмів машинного навчання.
        Вся ця інфраструктура розгорнута в AWS і оркеструється системою Titus — це власна контейнерна платформа Netflix, яка забезпечує розгортання, масштабування й відновлення сервісів. Для перевірки стійкості Netflix застосовує Chaos Monkey — інструмент, який навмисно виводить з ладу окремі елементи системи у продакшн-середовищі, перевіряючи готовність архітектури до відмов. Це частина філософії Chaos Engineering, яка передбачає проєктування системи з урахуванням того, що відмови є неминучими.
        Загалом, архітектура Netflix є результатом багаторічного інженерного розвитку, який поєднує найкращі практики хмарних обчислень, мікросервісного дизайну, стійкості до збоїв та обробки великих даних у реальному часі. Це жива, самоадаптивна екосистема, здатна безперервно еволюціонувати, зберігаючи стабільність і продуктивність на глобальному рівні.        
        Усередині Netflix мікросервіси організовані як автономні контейнери, що працюють у середовищі Titus — це внутрішня платформа управління контейнерами, побудована поверх Amazon EC2, яка виконує функції, аналогічні Kubernetes. Кожен мікросервіс упаковується як окремий Docker-контейнер із усіма залежностями, що дозволяє запускати його ізольовано, масштабувати горизонтально й оновлювати незалежно.
        Сервіси спілкуються через мережеві API — здебільшого це REST або gRPC, із підтримкою TLS для шифрування. Для асинхронної взаємодії використовуються брокери повідомлень — переважно Apache Kafka, що дозволяє мікросервісам обмінюватися подіями без прямого зв’язку. Наприклад, сервіс переглядів публікує події про те, що користувач почав чи завершив перегляд відео, а рекомендаційна система — підписана на ці події й оновлює моделі персоналізації у реальному часі.
        Важливий аспект — відмова від централізованих БД. Кожен сервіс має свою власну базу даних — це ізолює дані, спрощує масштабування і мінімізує ризики при зміні схеми. Найчастіше використовуються Cassandra для масивів поведінкових даних і MySQL для транзакційних процесів. Для кешування — EVCache, який працює поверх Memcached, забезпечуючи надшвидкий доступ до часто використовуваних даних.
        Щоб підтримувати стійкість, кожен виклик до іншого сервісу загортається в Hystrix, що реалізує шаблон Circuit Breaker. Це дозволяє уникати лавиноподібних збоїв — якщо один сервіс не відповідає, Hystrix відкриває "коло", зупиняє запити і вмикає резервну логіку (наприклад, показує кеш або глушить функцію).
        Уся взаємодія сервісів логується, моніториться й трасується за допомогою власних рішень Netflix, таких як Atlas, Edgar, Spinnaker та внутрішні системи аналітики. Це дозволяє не лише виявляти проблеми в реальному часі, а й будувати прогнози, автоматично масштабувати компоненти на основі метрик навантаження.
        У результаті, ми маємо високорівневу архітектурну мережу з десятками кластерів сервісів, які працюють автономно, але координовано, забезпечуючи не лише стабільність, а й безперервну доставку функціоналу.
        Netflix активно використовує великий набір технологій, обраних з урахуванням продуктивності, масштабованості та гнучкості. На рівні бекенду переважає Java, зокрема екосистема Spring Boot, яка забезпечує швидку розробку REST API та сервісів. Проте не обмежується лише нею: залежно від задачі, використовуються також Node.js для легких високошвидкісних сервісів, Python для аналітики та машинного навчання, а іноді — Go у продуктивно критичних компонентах.
        Фронтенд Netflix побудований на React, що дозволяє забезпечити швидке оновлення інтерфейсу, підтримку кросплатформеності та адаптивність для різних пристроїв — від SmartTV до смартфонів. Netflix також використовує власну обгортку над React для оптимізації продуктивності стримінгу й побудови динамічного інтерфейсу.
        У сфері зберігання даних використовуються різнотипні бази залежно від потреб: Cassandra — для масивних NoSQL-навантажень, MySQL — для транзакційних процесів, DynamoDB — для надшвидких key-value операцій. Для кешування застосовується EVCache — модифікована версія Memcached із підтримкою масштабування та розподілення.
        Для обробки подій у реальному часі використовується Kafka як основний брокер повідомлень, який забезпечує надійний потоковий обмін між сервісами. Його доповнюють Apache Samza та Apache Spark, які виконують стримінгову й пакетну обробку даних. Пошук реалізований через Elasticsearch, який індексує не лише вміст, але й події користувачів для побудови рекомендацій і діагностики.
        Уся система розгортається в хмарі AWS, на віртуальних машинах EC2 або в контейнерах, якими керує Titus — власна платформа Netflix для управління життєвим циклом сервісів. Безперервне розгортання реалізується за допомогою Spinnaker, що підтримує Blue/Green, Canary та автоматизовані rollback-стратегії. А для спостереження та аналізу використовуються внутрішні інструменти, такі як Atlas (метрики), Edgar (логування) та Zuul (маршрутизація).
        Усі ці компоненти зібрані в єдину інтегровану екосистему, що дозволяє Netflix працювати не лише як стримінговий сервіс, а як повноцінна інженерна платформа, здатна до швидких змін, масштабування та самодіагностики у глобальному середовищі.
        Однією з головних причин стабільності платформи Netflix є ретельно спроєктована стратегія масштабування та відмовостійкості. Усі сервіси Netflix працюють у хмарній інфраструктурі Amazon Web Services з використанням мультирегіонального розгортання. Це означає, що кожен критичний компонент запущений одразу в кількох географічних регіонах і зонах доступності, тож у разі збою в одному з них система автоматично переключається на інший — без втрати доступу для користувачів.
        Горизонтальне масштабування відбувається автоматично: якщо, наприклад, у конкретному регіоні збільшується кількість запитів до стримінгового сервісу, інфраструктура запускає додаткові екземпляри мікросервісів лише для цього регіону. Таке гнучке масштабування забезпечується через контейнерну платформу Titus, яка відстежує навантаження на CPU, пам’ять, мережу і реагує відповідно.
        Для ізоляції збоїв між сервісами застосовується бібліотека Hystrix, яка дозволяє обмежити вплив непрацюючого або повільного мікросервісу. Вона реалізує шаблон Circuit Breaker — якщо сервіс не відповідає або повертає помилки, Hystrix "розриває з’єднання" і не надсилає повторних запитів, завдяки чому вся система не завалюється через одну слабку ланку.
        Ще одним визначним елементом стратегії є використання Chaos Engineering. Netflix навмисно симулює збої в продакшн-середовищі за допомогою інструменту Chaos Monkey, який випадково вимикає окремі інстанси сервісів. Це дозволяє перевіряти, як система реагує на втрату компонентів у реальних умовах. Якщо сервіс не вміє коректно відновлюватися або перенаправляти навантаження — його вважають нестійким і доопрацьовують.
        Нарешті, важливу роль у стійкості грає власна CDN-мережа OpenConnect, яка бере на себе основне навантаження із доставки відео. Користувачі напряму з’єднуються з CDN-серверами, розміщеними максимально близько географічно, тож навіть у разі відмови центральних систем, стримінг не зупиняється.
        У сукупності ці техніки формують високонадійну екосистему, здатну витримувати мільярди запитів на добу без централізованих точок відмови.
        Один із найпотужніших інструментів Netflix — це рекомендаційна система, яка формує понад 75% усіх переглядів на платформі. Її основна мета — запропонувати користувачеві саме той контент, який з найбільшою ймовірністю буде переглянутий. Для цього система аналізує величезну кількість сигналів: історію переглядів, жанрові уподобання, час доби, мову перегляду, улюблених акторів, темп перемотування, відмову від перегляду, оцінки тощо.
        Ці дані збираються у реальному часі через подієву інфраструктуру Kafka та обробляються за допомогою Apache Spark, Samza й інших платформ потокової аналітики. В результаті формується динамічна модель профілю користувача, яка постійно оновлюється. У Netflix немає єдиної глобальної моделі рекомендацій — натомість використовується множина взаємодоповнюючих алгоритмів, зокрема: колаборативна фільтрація — на основі схожості з іншими користувачами; контентна фільтрація — за подібністю самих відео; графові зв’язки — на рівні переходів між категоріями чи серіями;
алгоритми навчання з підкріпленням, що враховують результат кліку.
        Netflix також активно використовує A/B-тестування: різні користувачі можуть бачити різні мініатюри, порядки елементів чи категорії, а система вимірює, що краще працює. Після цього успішні варіанти масштабуються на глобальну аудиторію.
        Усе це реалізується з використанням хмарних технологій і внутрішніх фреймворків, оптимізованих для швидкості обробки та зменшення затримки у видачі рекомендацій. Завдяки цьому інтерфейс Netflix адаптується буквально на очах — після одного-двох переглядів користувач уже бачить результати роботи персоналізації.
        Таким чином, рекомендаційна система Netflix — це не просто "алгоритм", а інтелектуальний багаторівневий механізм, що поєднує аналітику, машинне навчання, UX-дизайн і архітектурну інтеграцію з усіма мікросервісами платформи.
        Архітектура Netflix — це яскравий приклад того, як сучасні підходи до проєктування програмних систем дозволяють створювати стійкі, гнучкі та масштабовані рішення глобального рівня. Завдяки мікросервісній структурі, розподіленій хмарній інфраструктурі, автоматичному масштабуванню, системам кешування та власній CDN-мережі платформа здатна обслуговувати сотні мільйонів користувачів одночасно. Інтеграція машинного навчання, реальної аналітики та Chaos Engineering дозволяє не лише швидко розвивати систему, а й підтримувати її стабільність у надзвичайно динамічному середовищі.
        Проте така архітектура має й свої недоліки, які не можна ігнорувати. Передусім, це висока складність: для підтримки, моніторингу та координації сотень мікросервісів потрібна розвинена внутрішня інфраструктура і спеціалізовані інструменти. Також виникають труднощі з трасуванням проблем, особливо коли ланцюг викликів охоплює десятки сервісів. Утримання узгодженості даних без централізованих БД — окрема складність. Не менш важливим є й поріг входу: новим розробникам буває важко орієнтуватися в такій складній екосистемі.
        Попри це, обрана Netflix модель довела свою ефективність на практиці й сьогодні слугує еталоном хмарної мікросервісної архітектури, що задає напрям для всієї індустрії.




________________


4 ВИСНОВКИ
У ході виконання практичного завдання було детально проаналізовано архітектуру стримінгової платформи Netflix як приклад масштабованої, відмовостійкої та високодоступної хмарної системи, побудованої на основі мікросервісного підходу. У результаті проведеної роботи виявлено ключові архітектурні принципи, які дозволяють Netflix обробляти мільярди запитів щодня та залишатися надійним сервісом у глобальному масштабі.
        


________________


ДОДАТОК А 
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/HLkeFgD349s
00:00 Привітання та титульний слайд із заголовком
00:08 Що таке Netflix з точки зору програмної архітектури
00:38 Вимоги до архітектури платформи
02:16 Загальна архітектура Netflix. Схема архітектури, принцип її роботи
05:03 Мікросервіси Netflix. Їх структура та принцип роботи
06:37 Стек технологій платформи. Обгрунтування використання
08:15 Масштабування та стійкість. Принципи, які дозволяють платформі легко масштабуватися
09:44 Рекомендаційна система. Основні критерії, за якими працюють алгоритми
10:58 Підбиття підсумків. Недоліки системи
11:55 Список використаної літератури








________________


ДОДАТОК Б 
Презентація до доповіді 


  
Рисунок Б.1 – Титульний слайд презентації 


  



Рисунок Б.2 – Що таке Netflix. Коротке пояснення
  

Рисунок Б.3 – Вимоги до архітектури платформи 


  

Рисунок Б.4 – Опис загальної архітектури платформи








  
  
                Рисунок Б.5 – Мікросервіси платформи


  

Рисунок Б.6 – Технології, які були використані при побудові
________________
  

                Рисунок Б.7 – Масштабування та стійкість архітектури




  

Рисунок Б.8 – Рекомендаційна система платформи
________________
  
Рисунок Б.9 – Висновки доповіді



  
Рисунок Б.10 – Список використаної для доповіді літератури